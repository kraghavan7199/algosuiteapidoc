{
	"info": {
		"_postman_id": "aa52215d-f46d-4437-840e-653610ecd4eb",
		"name": "AlgoSuite APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10112104"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required user fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('email');",
									"    pm.expect(response).to.have.property('name');",
									"});",
									"",
									"pm.globals.set(\"userId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"test@example.com\",\n    \"password\": \"Password123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('token');",
									"    pm.globals.set(\"authToken\", response.token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"Password123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User data is correct\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.email).to.eql(\"test@example.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "String Operations",
			"item": [
				{
					"name": "Get Substring Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has substring data\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('substrings');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/string/teststring/substrings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"string",
								"teststring",
								"substrings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get String History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"History data structure is correct\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "?criteria={\"limit\":10,\"skip\":0}",
							"query": [
								{
									"key": "criteria",
									"value": "{\"limit\":10,\"skip\":0}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get String Suggestions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Suggestions are returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/string/test/suggestions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"string",
								"test",
								"suggestions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tree Operations",
			"item": [
				{
					"name": "Generate Binary Tree",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Tree is generated\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('tree');",
									"    pm.globals.set(\"generatedTree\", JSON.stringify(response.tree));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"depth\": 3\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tree/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tree",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Binary Tree",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Tree is saved\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tree\": {{generatedTree}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tree",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tree"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Binary Tree Calculations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Calculations are returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('calculations');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tree/inorder",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tree",
								"inorder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Tree",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User tree is returned\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('tree');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tree",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tree"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
